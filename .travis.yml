language: c
os: linux
dist: trusty
sudo: false

matrix:
  include:

    #  -- supported compilers  ------------------------------------------------

    # clang 3.8
    - env: UNIT_TESTS=false C_COMPILER=clang-3.8 ENABLE_MEMCHECK=true

    # clang 3.9
    - env: UNIT_TESTS=false C_COMPILER=clang-3.9 ENABLE_MEMCHECK=true

    # clang 4.0
    - env: UNIT_TESTS=false C_COMPILER=clang-4.0 ENABLE_MEMCHECK=true

    # clang 5.0
    - env: UNIT_TESTS=false C_COMPILER=clang-5.0 ENABLE_MEMCHECK=true

    # clang 6.0
    - env: UNIT_TESTS=false C_COMPILER=clang-6.0 ENABLE_MEMCHECK=true

    # gcc 5
    - env: UNIT_TESTS=false C_COMPILER=gcc-6 ENABLE_MEMCHECK=true

    # gcc 6
    - env: UNIT_TESTS=false C_COMPILER=gcc-6 ENABLE_MEMCHECK=true

    # gcc 7
    - env: UNIT_TESTS=false C_COMPILER=gcc-7 ENABLE_MEMCHECK=true

before_install:

  #  -- setup default versions and override compilers if needed  --------------
  
  - if [[ "${C_COMPILER}" != ""     ]]; then export CC=${C_COMPILER};    fi
  - if [[ "${CXX_C_COMPILER}" != "" ]]; then export CXX=${CXX_COMPILER}; fi
  - |
   if [[ "${CXX%%-*}" == "clang++" || "${CC%%-*}" == "clang" ]]; then

     if   [[ "${CXX}" == "clang++-3.8" ]]; then VERSION="3.8.1";
     elif [[ "${CXX}" == "clang++-3.9" ]]; then VERSION="3.9.1";
     elif [[ "${CXX}" == "clang++-4.0" ]]; then VERSION="4.0.1";
     elif [[ "${CXX}" == "clang++-5.0" ]]; then VERSION="5.0.1";
     elif [[ "${CXX}" == "clang++-6.0" ]]; then VERSION="6.0.1";
     fi

     if   [[ "${CC}" == "clang-3.8" ]]; then VERSION="3.8.1";
     elif [[ "${CC}" == "clang-3.9" ]]; then VERSION="3.9.1";
     elif [[ "${CC}" == "clang-4.0" ]]; then VERSION="4.0.1";
     elif [[ "${CC}" == "clang-5.0" ]]; then VERSION="5.0.1";
     elif [[ "${CC}" == "clang-6.0" ]]; then VERSION="6.0.1";
     fi

   elif [[ "{CXX%%-*}" == "g++" || "${CC%%-*}" == "gcc" ]]; then

     if   [[ "${CXX}" == "g++-5" ]]; then VERSION="5.5.0";
     elif [[ "${CXX}" == "g++-6" ]]; then VERSION="6.4.0";
     elif [[ "${CXX}" == "g++-7" ]]; then VERSION="7.3.0";
     fi

     if   [[ "${CC}" == "gcc-5" ]]; then VERSION="5.5.0";
     elif [[ "${CC}" == "gcc-6" ]]; then VERSION="6.4.0";
     elif [[ "${CC}" == "gcc-7" ]]; then VERSION="7.3.0";
     fi

   fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then /bin/bash init-docker ${CC%%-*} ${VERSION}; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker build -t pilab:latest -f docker/build/Dockerfile .; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker run -itd --name build pilab:latest; fi

script:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if   [[ "${CC%%-*}" == "gcc" || "${CXX%%-*}" == "g++" ]]; then
        docker exec build /bin/bash -c "CXX=${CXX%%-*}-${VERSION%%.*} CC=${CC%%-*}-${VERSION%%.*} meson /root /root/build";
      elif [[ "${CC%%-*}" == "clang" || "${CXX-*}" == "clang++" ]]; then
        docker exec build /bin/bash -c "CXX=${CXX%%-*}-${VERSION%.*} CC=${CC%%-*}-${VERSION%.*} meson /root /root/build";
      fi
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker exec build /bin/bash -c "ninja -C /root/build install"; fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      INSTALLS=( $(docker exec build /bin/bash -c "find /usr/local -regex '.*pilab.*$'") )
      PILAB_FILES=(/usr/local/bin/pilab /usr/local/etc/pilab /usr/local/etc/pilab/config /usr/local/share/pilab-sessions /usr/local/share/pilab-sessions/pilab.desktop)
      MATCHED=0
      for i in "${INSTALLS[@]}"; do
        for j in "${PILAB_FILES[@]}"; do
          if [[ "$i" == "$j" ]]; then
            MATCHED=$(($MATCHED + 1))
          fi
        done
      done
      [[ $MATCHED = "${#PILAB_FILES[@]}" ]] && exit 0 || exit 1
    fi
